---
title: "sas-03-01"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

```{r}
#| message: false
#| warning: false
#| label: 03-01-setup

library(glue)
library(tidyverse)
```

```{r}
#| label: 03-01-read

# Read the program and break it into 
# "bite-sized" pieces that fit easily
# on slides.

read_lines("simon-5507-03-import-comma-delimited.sas") |>
  paste0(collapse="\n") |>
  str_split("\n\n\n") |>
  unlist() |>
  str_remove("^\n") -> sas

add_note <- function(i) {paste0("::: notes\n", sas[i],"\n:::")}
add_code <- function(i) {paste0("```{}\n", sas[i], "\n```")}

text_data <- read_lines("../data/comma-delimited.csv")
```

## Defining a macro variable

-   %let command
    -   defines a macro value
-   &macro_variable_name
    -   substitutes that macro value in the code

::: notes

I find myself switching often between SAS On
Demand for Academics and SAS on Remote Labs.
One thing to simplify the code is to create a
macro variable. A macro variable is a value
that you specify once, typically right at the
start of your program code, and then use 
repeatedly later in your code.

:::

## Simple example

```{}
%let row_limit=10;

(later on in your code)

proc print
    data=phase1(obs=&row_limit);
    
(this gets converted by SAS into)

proc print
    data=phase1(obs=10);
    
```

::: notes

Here's a simple example. You set a macro variable called row_limit equal to the string 10. Then later in your program, you include that macro variable as part of proc print to specify that 

:::

## When should you use a macro variable?

-   Document important options at the top of your program
    -   Quick and easy changes
-   Reduce the amount of repetitive typing

## Text files

-   Each row is a separate observation
-   How to specify individual columns?
    -   Delimiters
    -   White space
    -   Fixed width

## A comma delimited file

```{r}
cat(text_data, sep="\n")
```

::: notes

This is an artificial dataset. Each row represents a different patient. Each patient has three numbers.

:::

## Demo-1, Documentation header

`r add_code(1)`

## Demo-1, File locations

`r add_code(2)`

`r add_note(3)`

## Demo-1, Data step

`r add_code(4)`

`r add_note(5)`

## Demo-1, Print procedure

`r add_code(6)`

## Live demo, 1

-   %let command
-   &path
-   delimiter argument (infile subcommand, data step)