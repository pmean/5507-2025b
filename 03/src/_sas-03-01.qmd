---
title: "sas-03-01"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

```{r}
#| message: false
#| warning: false
#| label: 03-01-setup

library(glue)
library(tidyverse)
```

```{r}
#| label: 03-01-read
sas <- chunk_sas("simon-5507-03-demo-01-space-delimited.sas")
text_data <- read_lines("../data/text-space-delimited.txt")
```

## Defining a macro variable

-   %let command
    -   defines a macro value
-   &macro_variable_name
    -   substitutes that macro value in the code

::: notes

I find myself switching often between SAS On Demand for Academics and SAS on Remote Labs. One thing to simplify the code is to create a macro variable. A macro variable is a value that you specify once, typically right at thestart of your program code, and then use repeatedly later in your code.

:::

## Simple example

```{}
%let row_limit=10;

(later on in your code)

proc print
    data=phase1(obs=&row_limit);
    
(this gets converted by SAS into)

proc print
    data=phase1(obs=10);
    
```

::: notes

Here's a simple example. You set a macro variable called row_limit equal to the string 10. Then later in your program, you include that macro variable as part of proc print to specify that 

:::

## When should you use a macro variable?

-   Document important options at the top of your program
    -   Quick and easy changes
-   Reduce the amount of repetitive typing
-   [Macro variables automatically available][ref-sas-nodate]
    -   My favorites, &sasdate and &sasver

[ref-sas-nodate]: https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/mcrolref/p14ym6slnzfstzn1t9yp5v31ijis.htm

::: notes

Macro variables have several uses. First, they allow you to place important options near the top of your code rather than buried somewhere in the code depths. Because they are easy to find, they allow you to quick changes. Finally, sometimes a piece of SAS code gets used multiple times. A macro variable allows you to write it once and then use the shorter macro name over and over again. This can sometimes save a lot of repetitive typing.

SAS has a wide range of macro variables. Most of these are only needed for very advanced and very specialized applications. You've already seen two of these,

:::

## Text files

-   Each row is a separate observation
-   How to specify individual columns?
    -   Blanks
    -   Delimiters
    -   Fixed width
    
::: notes

There's a quip, "Time is nature's way of keeping everything from happening all at once." For text file that represents data, how do you keep one piece of data separate from another piece of data?

The first thing that is commonly done is to put each patient's data on a separate line. You don't have to do it this way, but it works quite well for many types of data.

Within a line, how do you keep one piece of data for a patient separate from another? The simplest choice, and one that works well with SAS is to separate using one or more blanks.

You can use other marks, called delimiters, to separate pieces of data. The most common delimiter is a comma.

You can also specify which pieces of data go into which columns. This is fixed width format.

:::

## Importing choices

-   Add options to the infile statement
-   Use proc import
    -   Especially useful when the first row includes variable names
    -   Also useful for binary data files (e.g., Excel)
-   Use proc sql (not covered in this class)
-   Manual reformatting
    -    Global search and replace
    -    Not usually a good idea
    
::: notes

Often, you will just need to add an option to the infile statement to get SAS to read a particular text file.

You might also need to use the import procedure. This procedure is especially helpful when your first line of data includes the variable names.

While we will not cover it in this class, the import procedure also lets you read in binary data files. A binary file is a file that uses a special storage approach that has some advantages. It often takes up less space and can be read in a lot faster. But the hallmark of a binary file is that you can't view it in a text editor like Notepad or TextEdit.

Sometimes a text file is difficult to import. If you have to, you can manually reformat the data. Use the global search and replace function in your text editor program. I generally try to avoid this. If your data set changes, you have to redo the reformatting step, which is tedious and error prone. You'd be better off learning a few tricks to get SAS to read a nonstandard data set.

:::

## Options during data import

-   Skipping rows
-   Converting strings to numbers

::: notes

Sometimes you have to skip a few rows. Sometimes you have to convert strings to numbers. There are options for doing this in SAS.

:::

## Space delimited, example

```{r space-delimited.txt}
cat(text_data, sep="\n")
```

::: notes

Here is an example of a space-delimited file. It uses one or more blanks to separate the indidvidual data values. 

:::

`r sas[1]`

`r sas[2]`

`r sas[3]`

## Live demo