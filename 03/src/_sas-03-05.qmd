---
title: "sas-03-05"
format: 
  revealjs:
    slide-number: true
    embed-resources: true
editor: source
---

```{r}
#| label: 03-05-read
sas <- chunk_sas("simon-5507-03-demo-05-string-data.sas")
text_data <- read_lines("../data/text-with-strings.txt")
```

## String data

-   A combination of letters, numbers, blanks, and/or symbols, 
    -   Examples
        -   Simon, Stephen D. 
        -   2411 Holmes Street
        -   (816) 235-6617
-   Also called character data
-   Often enclosed in single quotes (`'`) or double quotes (`"`)
    -   Avoid smart/curly quotes (`‘’` or `“”`)

::: notes

String data, also called character data, is a combination of letters, numbers and/or symbols. A patients name, address, and telephone number, all of which are a combination of numbers, letters, and symbols, are examples of data that need strings to represent it.

:::

## Cautions about strings

-   Strings longer than 8 characters
-   Strings that include delimiters
-   Strings that include quote marks (Conan O'Brian)
-   Symbols outside 7-bit ASCII
    -   resumé, naïve, façade
-   Strings with different alphabets

::: notes

SAS (and SPSS) require a bit of care, at times, with strings longer than eight characters. Most of the time, longer strings are okay, but once in a while, you have to take special account for the longer strings.

Strings can (and often do) include common delimiters like the space and the comma.

Strings can also include single or double quote marks as part of the string. Common Irish names, like Conan O'Brian, are one example.

Also be careful with strings outside the 7-bit ASCII code. The term 7-bit ASCII refers to the original character set associated with many early computers. These were limited to only 128 because of computer limits and did not allow for accented characters (resumé), diaeresis (naïve), or the cedilla (façade). Several competing standards were developed for these special characters, and sometimes they clash.

Strings using different alphabets like Cyrillic, Greek, Hebrew, Arabic, Chinese will also sometimes present difficulties. These alphabets may sometimes require more than 8 bytes (especially Chinese) and the "size" of a string is sometimes tricky to measure.

:::

## A file with strings

```{r}
#| label: 03-05-text

cat(text_data, sep="\n")
```

::: notes

This is the same artificial dataset, with no delimiters. There are a few stray blanks, but only because some of the numbers are one digit instead of two or two digits instead of three.

:::

`r sas[1]`

`r sas[2]`

`r sas[3]`

## Live demo, 5

-   data step
    -   input subcommand
        -   $ option